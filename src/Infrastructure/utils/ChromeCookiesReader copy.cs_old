using System.Data.SQLite;
using System.Net;
using System.Security.Cryptography;
using System.Text;

namespace TrackYourLifeDotnet.Infrastructure.Utils;

public class ChromeCookiesReader
{
    public static CookieContainer ReadCookies(string[] cookieDomains)
    {
        string cookiePath =
            Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)
            + @"\Google\Chrome\User Data\Default\Network\Cookies";

        CookieContainer cookieContainer = new();

        using var connection = new SQLiteConnection($"Data Source={cookiePath};pooling=false");
        connection.Open();
        using var command = new SQLiteCommand(
            $"SELECT name, value, path, host_key, expires_utc, is_secure, is_httponly FROM Cookies WHERE host_key LIKE '%{string.Join("%' OR host_key LIKE '%", cookieDomains)}%'",
            connection
        );
        using SQLiteDataReader reader = command.ExecuteReader();
        while (reader.Read())
        {
            string? name = reader["name"].ToString();
            if (name is null)
            {
                continue;
            }

            byte[] encryptedData = GetBytes(reader, 1);
            byte[] nonce,
                ciphertextTag;
            byte[] key = AesGcm256.GetKey();

            AesGcm256.prepare(encryptedData, out nonce, out ciphertextTag);
            string value = AesGcm256.decrypt(ciphertextTag, key, nonce);
            string? value = reader["value"].ToString();
            string? path = reader["path"].ToString();
            string? domain = reader["host_key"].ToString();
            bool secure = Convert.ToBoolean(reader["is_secure"]);
            bool httpOnly = Convert.ToBoolean(reader["is_httponly"]);
            long expiresUtc = Convert.ToInt64(reader["expires_utc"]);

            DateTime expires = DateTime.FromFileTimeUtc(10 * (expiresUtc - 11644473600000000));

            var cookie = new Cookie(name, value, path, domain)
            {
                Expires = expires,
                Secure = secure,
                HttpOnly = httpOnly
            };
            cookieContainer.Add(cookie);
        }

        return cookieContainer;
    }

    private string DecryptCookie(byte[] masterKey, byte[] cookie)
    {
        byte[] nonce = cookie[3..15];
        byte[] ciphertext = cookie[15..(cookie.Length - 16)];
        byte[] tag = cookie[(cookie.Length - 16)..(cookie.Length)];

        byte[] resultBytes = new byte[ciphertext.Length];

        using AesGcm aesGcm = new AesGcm(masterKey);
        aesGcm.Decrypt(nonce, ciphertext, tag, resultBytes);
        string cookieValue = Encoding.UTF8.GetString(resultBytes);
        return cookieValue;
    }
}
