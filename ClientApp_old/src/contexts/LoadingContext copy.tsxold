import React, {
  createContext,
  ReactNode,
  useCallback,
  useContext,
  useMemo,
  useState,
} from "react";
import { LoadingState } from "~/hooks/useDelayedLoading";

interface LoadingContextProps {
  isLoadingContext: LoadingState;
  updateLoadingState: (id: string, newLoadingState: LoadingState) => void;
}

const LoadingContext = createContext<LoadingContextProps | undefined>(
  undefined,
);

export const LoadingContextProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [loadingStates, setLoadingStates] = useState<
    Record<string, LoadingState>
  >({});

  const updateLoadingState = useCallback(
    (id: string, newLoadingState: LoadingState) => {
      console.log("updateLoadingState", id);
      setLoadingStates((prev) => ({ ...prev, [id]: newLoadingState }));
    },
    [],
  );

  const loadingState = useMemo(
    () => ({
      isStarting:
        Object.values(loadingStates).some((state) => state.isStarting) &&
        !Object.values(loadingStates).some((state) => state.isLoading),
      isLoading: Object.values(loadingStates).some((state) => state.isLoading),
      isLoaded: Object.values(loadingStates).every((state) => state.isLoaded),
    }),
    [loadingStates],
  );

  const contextValue = useMemo(
    () => ({
      isLoadingContext: loadingState,
      updateLoadingState,
    }),
    [loadingState, updateLoadingState],
  );

  return (
    <LoadingContext.Provider value={contextValue}>
      {children}
    </LoadingContext.Provider>
  );
};

export const useLoadingContext = (): LoadingContextProps => {
  const context = useContext(LoadingContext);
  if (!context) {
    throw new Error("useLoading must be used within a LoadingProvider");
  }
  return context;
};
