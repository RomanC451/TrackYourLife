/* tslint:disable */
/* eslint-disable */
/**
 * TrackYourLife.App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const ActivityLevel = {
    Sedentary: 'Sedentary',
    LightlyActive: 'LightlyActive',
    ModeratelyActive: 'ModeratelyActive',
    Active: 'Active',
    ExtremelyActive: 'ExtremelyActive'
} as const;

export type ActivityLevel = typeof ActivityLevel[keyof typeof ActivityLevel];


/**
 * 
 * @export
 * @interface AddFoodDiaryRequest
 */
export interface AddFoodDiaryRequest {
    /**
     * 
     * @type {string}
     * @memberof AddFoodDiaryRequest
     */
    'foodId': string;
    /**
     * 
     * @type {MealTypes}
     * @memberof AddFoodDiaryRequest
     */
    'mealType': MealTypes;
    /**
     * 
     * @type {string}
     * @memberof AddFoodDiaryRequest
     */
    'servingSizeId': string;
    /**
     * 
     * @type {number}
     * @memberof AddFoodDiaryRequest
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof AddFoodDiaryRequest
     */
    'entryDate': string;
}


/**
 * 
 * @export
 * @interface AddGoalRequest
 */
export interface AddGoalRequest {
    /**
     * 
     * @type {number}
     * @memberof AddGoalRequest
     */
    'value': number;
    /**
     * 
     * @type {GoalType}
     * @memberof AddGoalRequest
     */
    'type': GoalType;
    /**
     * 
     * @type {GoalPeriod}
     * @memberof AddGoalRequest
     */
    'period': GoalPeriod;
    /**
     * 
     * @type {string}
     * @memberof AddGoalRequest
     */
    'startDate': string;
    /**
     * 
     * @type {boolean}
     * @memberof AddGoalRequest
     */
    'force'?: boolean | undefined;
    /**
     * 
     * @type {string}
     * @memberof AddGoalRequest
     */
    'endDate'?: string | undefined;
}


/**
 * 
 * @export
 * @interface AddIngredientRequest
 */
export interface AddIngredientRequest {
    /**
     * 
     * @type {string}
     * @memberof AddIngredientRequest
     */
    'foodId': string;
    /**
     * 
     * @type {string}
     * @memberof AddIngredientRequest
     */
    'servingSizeId': string;
    /**
     * 
     * @type {number}
     * @memberof AddIngredientRequest
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface AddRecipeDiaryRequest
 */
export interface AddRecipeDiaryRequest {
    /**
     * 
     * @type {string}
     * @memberof AddRecipeDiaryRequest
     */
    'recipeId': string;
    /**
     * 
     * @type {MealTypes}
     * @memberof AddRecipeDiaryRequest
     */
    'mealType': MealTypes;
    /**
     * 
     * @type {number}
     * @memberof AddRecipeDiaryRequest
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof AddRecipeDiaryRequest
     */
    'entryDate': string;
}


/**
 * 
 * @export
 * @interface CalculateNutritionGoalsRequest
 */
export interface CalculateNutritionGoalsRequest {
    /**
     * 
     * @type {number}
     * @memberof CalculateNutritionGoalsRequest
     */
    'age': number;
    /**
     * 
     * @type {number}
     * @memberof CalculateNutritionGoalsRequest
     */
    'weight': number;
    /**
     * 
     * @type {number}
     * @memberof CalculateNutritionGoalsRequest
     */
    'height': number;
    /**
     * 
     * @type {Gender}
     * @memberof CalculateNutritionGoalsRequest
     */
    'gender': Gender;
    /**
     * 
     * @type {ActivityLevel}
     * @memberof CalculateNutritionGoalsRequest
     */
    'activityLevel': ActivityLevel;
    /**
     * 
     * @type {FitnessGoal}
     * @memberof CalculateNutritionGoalsRequest
     */
    'fitnessGoal': FitnessGoal;
    /**
     * 
     * @type {boolean}
     * @memberof CalculateNutritionGoalsRequest
     */
    'force': boolean;
}


/**
 * 
 * @export
 * @interface CreateExerciseRequest
 */
export interface CreateExerciseRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseRequest
     */
    'pictureUrl'?: string | undefined;
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseRequest
     */
    'videoUrl'?: string | undefined;
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseRequest
     */
    'description'?: string | undefined;
    /**
     * 
     * @type {string}
     * @memberof CreateExerciseRequest
     */
    'equipment'?: string | undefined;
    /**
     * 
     * @type {Array<ExerciseSet>}
     * @memberof CreateExerciseRequest
     */
    'exerciseSets': Array<ExerciseSet>;
}
/**
 * 
 * @export
 * @interface CreateRecipeRequest
 */
export interface CreateRecipeRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateRecipeRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateTrainingRequest
 */
export interface CreateTrainingRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateTrainingRequest
     */
    'name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateTrainingRequest
     */
    'exercisesIds': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateTrainingRequest
     */
    'description'?: string | undefined;
    /**
     * 
     * @type {number}
     * @memberof CreateTrainingRequest
     */
    'duration': number;
}
/**
 * 
 * @export
 * @interface DailyNutritionOverviewDto
 */
export interface DailyNutritionOverviewDto {
    /**
     * 
     * @type {string}
     * @memberof DailyNutritionOverviewDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DailyNutritionOverviewDto
     */
    'date': string;
    /**
     * 
     * @type {NutritionalContent}
     * @memberof DailyNutritionOverviewDto
     */
    'nutritionalContent': NutritionalContent;
    /**
     * 
     * @type {number}
     * @memberof DailyNutritionOverviewDto
     */
    'caloriesGoal': number;
    /**
     * 
     * @type {number}
     * @memberof DailyNutritionOverviewDto
     */
    'carbohydratesGoal': number;
    /**
     * 
     * @type {number}
     * @memberof DailyNutritionOverviewDto
     */
    'fatGoal': number;
    /**
     * 
     * @type {number}
     * @memberof DailyNutritionOverviewDto
     */
    'proteinGoal': number;
}
/**
 * 
 * @export
 * @interface DeleteExerciseRequest
 */
export interface DeleteExerciseRequest {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteExerciseRequest
     */
    'forceDelete': boolean;
}
/**
 * 
 * @export
 * @interface DeleteRecipesRequest
 */
export interface DeleteRecipesRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof DeleteRecipesRequest
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DiaryType = {
    FoodDiary: 'FoodDiary',
    RecipeDiary: 'RecipeDiary'
} as const;

export type DiaryType = typeof DiaryType[keyof typeof DiaryType];


/**
 * 
 * @export
 * @interface Energy
 */
export interface Energy {
    /**
     * 
     * @type {string}
     * @memberof Energy
     */
    'unit': string;
    /**
     * 
     * @type {number}
     * @memberof Energy
     */
    'value': number;
}
/**
 * the dto used to send an error response to the client
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * the http status code sent to the client. default is 400.
     * @type {number}
     * @memberof ErrorResponse
     */
    'statusCode': number;
    /**
     * the message for the error response
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * the collection of errors for the current context
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ErrorResponse
     */
    'errors': { [key: string]: Array<string>; };
}
/**
 * 
 * @export
 * @interface ExerciseDto
 */
export interface ExerciseDto {
    /**
     * 
     * @type {string}
     * @memberof ExerciseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDto
     */
    'pictureUrl'?: string | undefined;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDto
     */
    'videoUrl'?: string | undefined;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDto
     */
    'description'?: string | undefined;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDto
     */
    'equipment'?: string | undefined;
    /**
     * 
     * @type {Array<ExerciseSet>}
     * @memberof ExerciseDto
     */
    'exerciseSets': Array<ExerciseSet>;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDto
     */
    'createdOnUtc': string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseDto
     */
    'modifiedOnUtc'?: string | undefined;
}
/**
 * 
 * @export
 * @interface ExerciseSet
 */
export interface ExerciseSet {
    /**
     * 
     * @type {string}
     * @memberof ExerciseSet
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ExerciseSet
     */
    'reps': number;
    /**
     * 
     * @type {number}
     * @memberof ExerciseSet
     */
    'weight': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const FitnessGoal = {
    WeightLoss: 'WeightLoss',
    MuscleGain: 'MuscleGain',
    Maintain: 'Maintain'
} as const;

export type FitnessGoal = typeof FitnessGoal[keyof typeof FitnessGoal];


/**
 * 
 * @export
 * @interface FoodDiaryDto
 */
export interface FoodDiaryDto {
    /**
     * 
     * @type {string}
     * @memberof FoodDiaryDto
     */
    'id': string;
    /**
     * 
     * @type {FoodDto}
     * @memberof FoodDiaryDto
     */
    'food': FoodDto;
    /**
     * 
     * @type {MealTypes}
     * @memberof FoodDiaryDto
     */
    'mealType': MealTypes;
    /**
     * 
     * @type {number}
     * @memberof FoodDiaryDto
     */
    'quantity': number;
    /**
     * 
     * @type {ServingSizeDto}
     * @memberof FoodDiaryDto
     */
    'servingSize': ServingSizeDto;
    /**
     * 
     * @type {string}
     * @memberof FoodDiaryDto
     */
    'date': string;
}


/**
 * 
 * @export
 * @interface FoodDto
 */
export interface FoodDto {
    /**
     * 
     * @type {string}
     * @memberof FoodDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FoodDto
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof FoodDto
     */
    'brandName': string;
    /**
     * 
     * @type {string}
     * @memberof FoodDto
     */
    'countryCode': string;
    /**
     * 
     * @type {string}
     * @memberof FoodDto
     */
    'name': string;
    /**
     * 
     * @type {NutritionalContent}
     * @memberof FoodDto
     */
    'nutritionalContents': NutritionalContent;
    /**
     * 
     * @type {{ [key: string]: ServingSizeDto; }}
     * @memberof FoodDto
     */
    'servingSizes': { [key: string]: ServingSizeDto; };
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Gender = {
    Male: 'Male',
    Female: 'Female'
} as const;

export type Gender = typeof Gender[keyof typeof Gender];


/**
 * 
 * @export
 * @interface GetNutritionDiariesByDateResponse
 */
export interface GetNutritionDiariesByDateResponse {
    /**
     * 
     * @type {{ [key: string]: Array<NutritionDiaryDto>; }}
     * @memberof GetNutritionDiariesByDateResponse
     */
    'diaries': { [key: string]: Array<NutritionDiaryDto>; };
}
/**
 * 
 * @export
 * @interface GoalDto
 */
export interface GoalDto {
    /**
     * 
     * @type {string}
     * @memberof GoalDto
     */
    'id': string;
    /**
     * 
     * @type {GoalType}
     * @memberof GoalDto
     */
    'type': GoalType;
    /**
     * 
     * @type {number}
     * @memberof GoalDto
     */
    'value': number;
    /**
     * 
     * @type {GoalPeriod}
     * @memberof GoalDto
     */
    'period': GoalPeriod;
    /**
     * 
     * @type {string}
     * @memberof GoalDto
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof GoalDto
     */
    'endDate': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const GoalPeriod = {
    Day: 'Day',
    Week: 'Week',
    Month: 'Month'
} as const;

export type GoalPeriod = typeof GoalPeriod[keyof typeof GoalPeriod];


/**
 * 
 * @export
 * @enum {string}
 */

export const GoalType = {
    Calories: 'Calories',
    Water: 'Water',
    Protein: 'Protein',
    Carbohydrates: 'Carbohydrates',
    Fats: 'Fats'
} as const;

export type GoalType = typeof GoalType[keyof typeof GoalType];


/**
 * 
 * @export
 * @interface IStronglyTypedGuid
 */
export interface IStronglyTypedGuid {
    /**
     * 
     * @type {string}
     * @memberof IStronglyTypedGuid
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface IdResponse
 */
export interface IdResponse {
    /**
     * 
     * @type {string}
     * @memberof IdResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface IngredientDto
 */
export interface IngredientDto {
    /**
     * 
     * @type {string}
     * @memberof IngredientDto
     */
    'id': string;
    /**
     * 
     * @type {FoodDto}
     * @memberof IngredientDto
     */
    'food': FoodDto;
    /**
     * 
     * @type {ServingSizeDto}
     * @memberof IngredientDto
     */
    'servingSize': ServingSizeDto;
    /**
     * 
     * @type {number}
     * @memberof IngredientDto
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface LogOutUserRequest
 */
export interface LogOutUserRequest {
    /**
     * 
     * @type {string}
     * @memberof LogOutUserRequest
     */
    'deviceId': string;
    /**
     * 
     * @type {boolean}
     * @memberof LogOutUserRequest
     */
    'logOutAllDevices': boolean;
}
/**
 * 
 * @export
 * @interface LoginUserRequest
 */
export interface LoginUserRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginUserRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserRequest
     */
    'deviceId': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const MealTypes = {
    Breakfast: 'Breakfast',
    Lunch: 'Lunch',
    Dinner: 'Dinner',
    Snacks: 'Snacks'
} as const;

export type MealTypes = typeof MealTypes[keyof typeof MealTypes];


/**
 * 
 * @export
 * @interface NutritionDiaryDto
 */
export interface NutritionDiaryDto {
    /**
     * 
     * @type {string}
     * @memberof NutritionDiaryDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof NutritionDiaryDto
     */
    'name': string;
    /**
     * 
     * @type {NutritionDiaryDtoServingSize}
     * @memberof NutritionDiaryDto
     */
    'servingSize'?: NutritionDiaryDtoServingSize | undefined;
    /**
     * 
     * @type {NutritionalContent}
     * @memberof NutritionDiaryDto
     */
    'nutritionalContents': NutritionalContent;
    /**
     * 
     * @type {number}
     * @memberof NutritionDiaryDto
     */
    'nutritionMultiplier': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionDiaryDto
     */
    'quantity': number;
    /**
     * 
     * @type {MealTypes}
     * @memberof NutritionDiaryDto
     */
    'mealType': MealTypes;
    /**
     * 
     * @type {DiaryType}
     * @memberof NutritionDiaryDto
     */
    'diaryType': DiaryType;
    /**
     * 
     * @type {string}
     * @memberof NutritionDiaryDto
     */
    'date': string;
}


/**
 * @type NutritionDiaryDtoServingSize
 * @export
 */
export type NutritionDiaryDtoServingSize = ServingSizeDto;

/**
 * 
 * @export
 * @interface NutritionalContent
 */
export interface NutritionalContent {
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'calcium': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'carbohydrates': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'cholesterol': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'fat': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'fiber': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'iron': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'monounsaturatedFat': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'netCarbs': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'polyunsaturatedFat': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'potassium': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'protein': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'saturatedFat': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'sodium': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'sugar': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'transFat': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'vitaminA': number;
    /**
     * 
     * @type {number}
     * @memberof NutritionalContent
     */
    'vitaminC': number;
    /**
     * 
     * @type {Energy}
     * @memberof NutritionalContent
     */
    'energy': Energy;
}
/**
 * 
 * @export
 * @interface PagedListOfFoodDto
 */
export interface PagedListOfFoodDto {
    /**
     * 
     * @type {Array<FoodDto>}
     * @memberof PagedListOfFoodDto
     */
    'items': Array<FoodDto>;
    /**
     * 
     * @type {number}
     * @memberof PagedListOfFoodDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof PagedListOfFoodDto
     */
    'pageSize': number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedListOfFoodDto
     */
    'hasPreviousPage': boolean;
    /**
     * 
     * @type {number}
     * @memberof PagedListOfFoodDto
     */
    'maxPage': number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedListOfFoodDto
     */
    'hasNextPage': boolean;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | undefined;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | undefined;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | undefined;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | undefined;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | undefined;
}
/**
 * 
 * @export
 * @interface RecipeDiaryDto
 */
export interface RecipeDiaryDto {
    /**
     * 
     * @type {string}
     * @memberof RecipeDiaryDto
     */
    'id': string;
    /**
     * 
     * @type {RecipeDto}
     * @memberof RecipeDiaryDto
     */
    'recipe': RecipeDto;
    /**
     * 
     * @type {MealTypes}
     * @memberof RecipeDiaryDto
     */
    'mealType': MealTypes;
    /**
     * 
     * @type {number}
     * @memberof RecipeDiaryDto
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof RecipeDiaryDto
     */
    'date': string;
}


/**
 * 
 * @export
 * @interface RecipeDto
 */
export interface RecipeDto {
    /**
     * 
     * @type {string}
     * @memberof RecipeDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RecipeDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof RecipeDto
     */
    'portions': number;
    /**
     * 
     * @type {Array<IngredientDto>}
     * @memberof RecipeDto
     */
    'ingredients': Array<IngredientDto>;
    /**
     * 
     * @type {NutritionalContent}
     * @memberof RecipeDto
     */
    'nutritionalContents': NutritionalContent;
}
/**
 * 
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenRequest
     */
    'deviceId': string;
}
/**
 * 
 * @export
 * @interface RegisterUserRequest
 */
export interface RegisterUserRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserRequest
     */
    'lastName': string;
}
/**
 * 
 * @export
 * @interface RemoveIngredientsRequest
 */
export interface RemoveIngredientsRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof RemoveIngredientsRequest
     */
    'ingredientsIds': Array<string>;
}
/**
 * 
 * @export
 * @interface ResendEmailVerificationRequest
 */
export interface ResendEmailVerificationRequest {
    /**
     * 
     * @type {string}
     * @memberof ResendEmailVerificationRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ServingSizeDto
 */
export interface ServingSizeDto {
    /**
     * 
     * @type {string}
     * @memberof ServingSizeDto
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ServingSizeDto
     */
    'nutritionMultiplier': number;
    /**
     * 
     * @type {number}
     * @memberof ServingSizeDto
     */
    'value': number;
    /**
     * 
     * @type {string}
     * @memberof ServingSizeDto
     */
    'unit': string;
}
/**
 * 
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    'tokenValue': string;
}
/**
 * 
 * @export
 * @interface TrainingDto
 */
export interface TrainingDto {
    /**
     * 
     * @type {string}
     * @memberof TrainingDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TrainingDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof TrainingDto
     */
    'duration': number;
    /**
     * 
     * @type {string}
     * @memberof TrainingDto
     */
    'description'?: string | undefined;
    /**
     * 
     * @type {Array<ExerciseDto>}
     * @memberof TrainingDto
     */
    'exercises': Array<ExerciseDto>;
    /**
     * 
     * @type {string}
     * @memberof TrainingDto
     */
    'createdOnUtc': string;
    /**
     * 
     * @type {string}
     * @memberof TrainingDto
     */
    'modifiedOnUtc'?: string | undefined;
}
/**
 * 
 * @export
 * @interface UndoDeleteRecipeRequest
 */
export interface UndoDeleteRecipeRequest {
    /**
     * 
     * @type {string}
     * @memberof UndoDeleteRecipeRequest
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UpdateCurrentUserRequest
 */
export interface UpdateCurrentUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateCurrentUserRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCurrentUserRequest
     */
    'lastName': string;
}
/**
 * 
 * @export
 * @interface UpdateExerciseRequest
 */
export interface UpdateExerciseRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseRequest
     */
    'description'?: string | undefined;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseRequest
     */
    'videoUrl'?: string | undefined;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseRequest
     */
    'pictureUrl'?: string | undefined;
    /**
     * 
     * @type {string}
     * @memberof UpdateExerciseRequest
     */
    'equipment'?: string | undefined;
    /**
     * 
     * @type {Array<ExerciseSet>}
     * @memberof UpdateExerciseRequest
     */
    'exerciseSets': Array<ExerciseSet>;
}
/**
 * 
 * @export
 * @interface UpdateFoodDiaryRequest
 */
export interface UpdateFoodDiaryRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateFoodDiaryRequest
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateFoodDiaryRequest
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateFoodDiaryRequest
     */
    'servingSizeId': string;
    /**
     * 
     * @type {MealTypes}
     * @memberof UpdateFoodDiaryRequest
     */
    'mealType': MealTypes;
}


/**
 * 
 * @export
 * @interface UpdateGoalRequest
 */
export interface UpdateGoalRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateGoalRequest
     */
    'id': string;
    /**
     * 
     * @type {GoalType}
     * @memberof UpdateGoalRequest
     */
    'type': GoalType;
    /**
     * 
     * @type {number}
     * @memberof UpdateGoalRequest
     */
    'value': number;
    /**
     * 
     * @type {GoalPeriod}
     * @memberof UpdateGoalRequest
     */
    'period': GoalPeriod;
    /**
     * 
     * @type {string}
     * @memberof UpdateGoalRequest
     */
    'startDate': string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateGoalRequest
     */
    'force'?: boolean | undefined;
    /**
     * 
     * @type {string}
     * @memberof UpdateGoalRequest
     */
    'endDate'?: string | undefined;
}


/**
 * 
 * @export
 * @interface UpdateIngredientRequest
 */
export interface UpdateIngredientRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateIngredientRequest
     */
    'servingSizeId': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateIngredientRequest
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface UpdateNutritionGoalsRequest
 */
export interface UpdateNutritionGoalsRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateNutritionGoalsRequest
     */
    'calories': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateNutritionGoalsRequest
     */
    'protein': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateNutritionGoalsRequest
     */
    'carbohydrates': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateNutritionGoalsRequest
     */
    'fats': number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateNutritionGoalsRequest
     */
    'force'?: boolean | undefined;
}
/**
 * 
 * @export
 * @interface UpdateRecipeDiaryRequest
 */
export interface UpdateRecipeDiaryRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateRecipeDiaryRequest
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateRecipeDiaryRequest
     */
    'quantity': number;
    /**
     * 
     * @type {MealTypes}
     * @memberof UpdateRecipeDiaryRequest
     */
    'mealType': MealTypes;
}


/**
 * 
 * @export
 * @interface UpdateRecipeRequest
 */
export interface UpdateRecipeRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateRecipeRequest
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateRecipeRequest
     */
    'portions': number;
}
/**
 * 
 * @export
 * @interface UpdateTrainingRequest
 */
export interface UpdateTrainingRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateTrainingRequest
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateTrainingRequest
     */
    'duration': number;
    /**
     * 
     * @type {string}
     * @memberof UpdateTrainingRequest
     */
    'description'?: string | undefined;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateTrainingRequest
     */
    'exercisesIds': Array<string>;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'lastName': string;
}
/**
 * 
 * @export
 * @interface VerifyEmailRequest
 */
export interface VerifyEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof VerifyEmailRequest
     */
    'token': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LogOutUserRequest} logOutUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOutUser: async (logOutUserRequest: LogOutUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logOutUserRequest' is not null or undefined
            assertParamExists('logOutUser', 'logOutUserRequest', logOutUserRequest)
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logOutUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginUserRequest} loginUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: async (loginUserRequest: LoginUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserRequest' is not null or undefined
            assertParamExists('loginUser', 'loginUserRequest', loginUserRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshTokenRequest: RefreshTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenRequest' is not null or undefined
            assertParamExists('refreshToken', 'refreshTokenRequest', refreshTokenRequest)
            const localVarPath = `/api/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterUserRequest} registerUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (registerUserRequest: RegisterUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerUserRequest' is not null or undefined
            assertParamExists('registerUser', 'registerUserRequest', registerUserRequest)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendEmailVerification: async (resendEmailVerificationRequest: ResendEmailVerificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resendEmailVerificationRequest' is not null or undefined
            assertParamExists('resendEmailVerification', 'resendEmailVerificationRequest', resendEmailVerificationRequest)
            const localVarPath = `/api/auth/resend-verification-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resendEmailVerificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerifyEmailRequest} verifyEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail: async (verifyEmailRequest: VerifyEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmailRequest' is not null or undefined
            assertParamExists('verifyEmail', 'verifyEmailRequest', verifyEmailRequest)
            const localVarPath = `/api/auth/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LogOutUserRequest} logOutUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logOutUser(logOutUserRequest: LogOutUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logOutUser(logOutUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.logOutUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginUserRequest} loginUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUser(loginUserRequest: LoginUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(loginUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.loginUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterUserRequest} registerUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(registerUserRequest: RegisterUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(registerUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.registerUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendEmailVerification(resendEmailVerificationRequest: ResendEmailVerificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendEmailVerification(resendEmailVerificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.resendEmailVerification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {VerifyEmailRequest} verifyEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmail(verifyEmailRequest: VerifyEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmail(verifyEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.verifyEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LogOutUserRequest} logOutUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logOutUser(logOutUserRequest: LogOutUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logOutUser(logOutUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginUserRequest} loginUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(loginUserRequest: LoginUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.loginUser(loginUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.refreshToken(refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterUserRequest} registerUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(registerUserRequest: RegisterUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.registerUser(registerUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendEmailVerification(resendEmailVerificationRequest: ResendEmailVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resendEmailVerification(resendEmailVerificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerifyEmailRequest} verifyEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail(verifyEmailRequest: VerifyEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.verifyEmail(verifyEmailRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {LogOutUserRequest} logOutUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logOutUser(logOutUserRequest: LogOutUserRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).logOutUser(logOutUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginUserRequest} loginUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginUser(loginUserRequest: LoginUserRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginUser(loginUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshToken(refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterUserRequest} registerUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public registerUser(registerUserRequest: RegisterUserRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).registerUser(registerUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResendEmailVerificationRequest} resendEmailVerificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public resendEmailVerification(resendEmailVerificationRequest: ResendEmailVerificationRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).resendEmailVerification(resendEmailVerificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerifyEmailRequest} verifyEmailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public verifyEmail(verifyEmailRequest: VerifyEmailRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).verifyEmail(verifyEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DailyNutritionOverviewsApi - axios parameter creator
 * @export
 */
export const DailyNutritionOverviewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyNutritionOverviewsByDateRange: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getDailyNutritionOverviewsByDateRange', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getDailyNutritionOverviewsByDateRange', 'endDate', endDate)
            const localVarPath = `/api/daily-nutrition-overviews/range`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DailyNutritionOverviewsApi - functional programming interface
 * @export
 */
export const DailyNutritionOverviewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DailyNutritionOverviewsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailyNutritionOverviewsByDateRange(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DailyNutritionOverviewDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailyNutritionOverviewsByDateRange(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DailyNutritionOverviewsApi.getDailyNutritionOverviewsByDateRange']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DailyNutritionOverviewsApi - factory interface
 * @export
 */
export const DailyNutritionOverviewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DailyNutritionOverviewsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyNutritionOverviewsByDateRange(startDate: string, endDate: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<DailyNutritionOverviewDto>> {
            return localVarFp.getDailyNutritionOverviewsByDateRange(startDate, endDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DailyNutritionOverviewsApi - object-oriented interface
 * @export
 * @class DailyNutritionOverviewsApi
 * @extends {BaseAPI}
 */
export class DailyNutritionOverviewsApi extends BaseAPI {
    /**
     * 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyNutritionOverviewsApi
     */
    public getDailyNutritionOverviewsByDateRange(startDate: string, endDate: string, options?: RawAxiosRequestConfig) {
        return DailyNutritionOverviewsApiFp(this.configuration).getDailyNutritionOverviewsByDateRange(startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExercisesApi - axios parameter creator
 * @export
 */
export const ExercisesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateExerciseRequest} createExerciseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExercise: async (createExerciseRequest: CreateExerciseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createExerciseRequest' is not null or undefined
            assertParamExists('createExercise', 'createExerciseRequest', createExerciseRequest)
            const localVarPath = `/api/exercises/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExerciseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} id 
         * @param {DeleteExerciseRequest} deleteExerciseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExercise: async (id: string | null, deleteExerciseRequest: DeleteExerciseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteExercise', 'id', id)
            // verify required parameter 'deleteExerciseRequest' is not null or undefined
            assertParamExists('deleteExercise', 'deleteExerciseRequest', deleteExerciseRequest)
            const localVarPath = `/api/exercises/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteExerciseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercises: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/exercises/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} id 
         * @param {UpdateExerciseRequest} updateExerciseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExercise: async (id: string | null, updateExerciseRequest: UpdateExerciseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateExercise', 'id', id)
            // verify required parameter 'updateExerciseRequest' is not null or undefined
            assertParamExists('updateExercise', 'updateExerciseRequest', updateExerciseRequest)
            const localVarPath = `/api/exercises/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExerciseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExercisesApi - functional programming interface
 * @export
 */
export const ExercisesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExercisesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseRequest} createExerciseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExercise(createExerciseRequest: CreateExerciseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExercise(createExerciseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.createExercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} id 
         * @param {DeleteExerciseRequest} deleteExerciseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExercise(id: string | null, deleteExerciseRequest: DeleteExerciseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExercise(id, deleteExerciseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.deleteExercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercises(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExerciseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercises(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.getExercises']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} id 
         * @param {UpdateExerciseRequest} updateExerciseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExercise(id: string | null, updateExerciseRequest: UpdateExerciseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExercise(id, updateExerciseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExercisesApi.updateExercise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExercisesApi - factory interface
 * @export
 */
export const ExercisesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExercisesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateExerciseRequest} createExerciseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExercise(createExerciseRequest: CreateExerciseRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdResponse> {
            return localVarFp.createExercise(createExerciseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} id 
         * @param {DeleteExerciseRequest} deleteExerciseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExercise(id: string | null, deleteExerciseRequest: DeleteExerciseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExercise(id, deleteExerciseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercises(options?: RawAxiosRequestConfig): AxiosPromise<Array<ExerciseDto>> {
            return localVarFp.getExercises(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} id 
         * @param {UpdateExerciseRequest} updateExerciseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExercise(id: string | null, updateExerciseRequest: UpdateExerciseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateExercise(id, updateExerciseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExercisesApi - object-oriented interface
 * @export
 * @class ExercisesApi
 * @extends {BaseAPI}
 */
export class ExercisesApi extends BaseAPI {
    /**
     * 
     * @param {CreateExerciseRequest} createExerciseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public createExercise(createExerciseRequest: CreateExerciseRequest, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).createExercise(createExerciseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} id 
     * @param {DeleteExerciseRequest} deleteExerciseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public deleteExercise(id: string | null, deleteExerciseRequest: DeleteExerciseRequest, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).deleteExercise(id, deleteExerciseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public getExercises(options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).getExercises(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} id 
     * @param {UpdateExerciseRequest} updateExerciseRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApi
     */
    public updateExercise(id: string | null, updateExerciseRequest: UpdateExerciseRequest, options?: RawAxiosRequestConfig) {
        return ExercisesApiFp(this.configuration).updateExercise(id, updateExerciseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FoodDiariesApi - axios parameter creator
 * @export
 */
export const FoodDiariesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddFoodDiaryRequest} addFoodDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFoodDiary: async (addFoodDiaryRequest: AddFoodDiaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addFoodDiaryRequest' is not null or undefined
            assertParamExists('addFoodDiary', 'addFoodDiaryRequest', addFoodDiaryRequest)
            const localVarPath = `/api/food-diaries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addFoodDiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFoodDiary: async (id: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFoodDiary', 'id', id)
            const localVarPath = `/api/food-diaries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoodDiaryById: async (id: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFoodDiaryById', 'id', id)
            const localVarPath = `/api/food-diaries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateFoodDiaryRequest} updateFoodDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFoodDiary: async (updateFoodDiaryRequest: UpdateFoodDiaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateFoodDiaryRequest' is not null or undefined
            assertParamExists('updateFoodDiary', 'updateFoodDiaryRequest', updateFoodDiaryRequest)
            const localVarPath = `/api/food-diaries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFoodDiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoodDiariesApi - functional programming interface
 * @export
 */
export const FoodDiariesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoodDiariesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddFoodDiaryRequest} addFoodDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFoodDiary(addFoodDiaryRequest: AddFoodDiaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFoodDiary(addFoodDiaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FoodDiariesApi.addFoodDiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFoodDiary(id: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFoodDiary(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FoodDiariesApi.deleteFoodDiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFoodDiaryById(id: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoodDiaryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFoodDiaryById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FoodDiariesApi.getFoodDiaryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateFoodDiaryRequest} updateFoodDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFoodDiary(updateFoodDiaryRequest: UpdateFoodDiaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFoodDiary(updateFoodDiaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FoodDiariesApi.updateFoodDiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FoodDiariesApi - factory interface
 * @export
 */
export const FoodDiariesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoodDiariesApiFp(configuration)
    return {
        /**
         * 
         * @param {AddFoodDiaryRequest} addFoodDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFoodDiary(addFoodDiaryRequest: AddFoodDiaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdResponse> {
            return localVarFp.addFoodDiary(addFoodDiaryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFoodDiary(id: string | null, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFoodDiary(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoodDiaryById(id: string | null, options?: RawAxiosRequestConfig): AxiosPromise<FoodDiaryDto> {
            return localVarFp.getFoodDiaryById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateFoodDiaryRequest} updateFoodDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFoodDiary(updateFoodDiaryRequest: UpdateFoodDiaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateFoodDiary(updateFoodDiaryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FoodDiariesApi - object-oriented interface
 * @export
 * @class FoodDiariesApi
 * @extends {BaseAPI}
 */
export class FoodDiariesApi extends BaseAPI {
    /**
     * 
     * @param {AddFoodDiaryRequest} addFoodDiaryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodDiariesApi
     */
    public addFoodDiary(addFoodDiaryRequest: AddFoodDiaryRequest, options?: RawAxiosRequestConfig) {
        return FoodDiariesApiFp(this.configuration).addFoodDiary(addFoodDiaryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodDiariesApi
     */
    public deleteFoodDiary(id: string | null, options?: RawAxiosRequestConfig) {
        return FoodDiariesApiFp(this.configuration).deleteFoodDiary(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodDiariesApi
     */
    public getFoodDiaryById(id: string | null, options?: RawAxiosRequestConfig) {
        return FoodDiariesApiFp(this.configuration).getFoodDiaryById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateFoodDiaryRequest} updateFoodDiaryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodDiariesApi
     */
    public updateFoodDiary(updateFoodDiaryRequest: UpdateFoodDiaryRequest, options?: RawAxiosRequestConfig) {
        return FoodDiariesApiFp(this.configuration).updateFoodDiary(updateFoodDiaryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FoodsApi - axios parameter creator
 * @export
 */
export const FoodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoodById: async (id: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFoodById', 'id', id)
            const localVarPath = `/api/foods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} searchParam 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFoodsByName: async (searchParam: string | null, page: number, pageSize: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchParam' is not null or undefined
            assertParamExists('searchFoodsByName', 'searchParam', searchParam)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('searchFoodsByName', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('searchFoodsByName', 'pageSize', pageSize)
            const localVarPath = `/api/foods/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchParam !== undefined) {
                localVarQueryParameter['searchParam'] = searchParam;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} cookieFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFoodApiCookies: async (cookieFile: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookieFile' is not null or undefined
            assertParamExists('updateFoodApiCookies', 'cookieFile', cookieFile)
            const localVarPath = `/api/foods/food-api-cookies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (cookieFile !== undefined) { 
                localVarFormParams.append('cookieFile', cookieFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoodsApi - functional programming interface
 * @export
 */
export const FoodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoodsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFoodById(id: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoodDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFoodById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FoodsApi.getFoodById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} searchParam 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFoodsByName(searchParam: string | null, page: number, pageSize: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedListOfFoodDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFoodsByName(searchParam, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FoodsApi.searchFoodsByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {File} cookieFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFoodApiCookies(cookieFile: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFoodApiCookies(cookieFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FoodsApi.updateFoodApiCookies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FoodsApi - factory interface
 * @export
 */
export const FoodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoodsApiFp(configuration)
    return {
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoodById(id: string | null, options?: RawAxiosRequestConfig): AxiosPromise<FoodDto> {
            return localVarFp.getFoodById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} searchParam 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFoodsByName(searchParam: string | null, page: number, pageSize: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedListOfFoodDto> {
            return localVarFp.searchFoodsByName(searchParam, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} cookieFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFoodApiCookies(cookieFile: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateFoodApiCookies(cookieFile, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FoodsApi - object-oriented interface
 * @export
 * @class FoodsApi
 * @extends {BaseAPI}
 */
export class FoodsApi extends BaseAPI {
    /**
     * 
     * @param {string | null} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodsApi
     */
    public getFoodById(id: string | null, options?: RawAxiosRequestConfig) {
        return FoodsApiFp(this.configuration).getFoodById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} searchParam 
     * @param {number} page 
     * @param {number} pageSize 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodsApi
     */
    public searchFoodsByName(searchParam: string | null, page: number, pageSize: number, options?: RawAxiosRequestConfig) {
        return FoodsApiFp(this.configuration).searchFoodsByName(searchParam, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} cookieFile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoodsApi
     */
    public updateFoodApiCookies(cookieFile: File, options?: RawAxiosRequestConfig) {
        return FoodsApiFp(this.configuration).updateFoodApiCookies(cookieFile, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GoalsApi - axios parameter creator
 * @export
 */
export const GoalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddGoalRequest} addGoalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGoal: async (addGoalRequest: AddGoalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addGoalRequest' is not null or undefined
            assertParamExists('addGoal', 'addGoalRequest', addGoalRequest)
            const localVarPath = `/api/goals/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addGoalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CalculateNutritionGoalsRequest} calculateNutritionGoalsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateNutritionGoals: async (calculateNutritionGoalsRequest: CalculateNutritionGoalsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'calculateNutritionGoalsRequest' is not null or undefined
            assertParamExists('calculateNutritionGoals', 'calculateNutritionGoalsRequest', calculateNutritionGoalsRequest)
            const localVarPath = `/api/goals/nutrition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(calculateNutritionGoalsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GoalType} goalType 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoal: async (goalType: GoalType, date: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalType' is not null or undefined
            assertParamExists('getGoal', 'goalType', goalType)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getGoal', 'date', date)
            const localVarPath = `/api/goals/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (goalType !== undefined) {
                localVarQueryParameter['goalType'] = goalType;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNutritionGoals: async (date: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getNutritionGoals', 'date', date)
            const localVarPath = `/api/goals/nutrition-goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateGoalRequest} updateGoalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoal: async (updateGoalRequest: UpdateGoalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateGoalRequest' is not null or undefined
            assertParamExists('updateGoal', 'updateGoalRequest', updateGoalRequest)
            const localVarPath = `/api/goals/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGoalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateNutritionGoalsRequest} updateNutritionGoalsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNutritionGoals: async (updateNutritionGoalsRequest: UpdateNutritionGoalsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateNutritionGoalsRequest' is not null or undefined
            assertParamExists('updateNutritionGoals', 'updateNutritionGoalsRequest', updateNutritionGoalsRequest)
            const localVarPath = `/api/goals/nutrition/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNutritionGoalsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoalsApi - functional programming interface
 * @export
 */
export const GoalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoalsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddGoalRequest} addGoalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGoal(addGoalRequest: AddGoalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addGoal(addGoalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.addGoal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CalculateNutritionGoalsRequest} calculateNutritionGoalsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateNutritionGoals(calculateNutritionGoalsRequest: CalculateNutritionGoalsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calculateNutritionGoals(calculateNutritionGoalsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.calculateNutritionGoals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GoalType} goalType 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGoal(goalType: GoalType, date: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGoal(goalType, date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.getGoal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNutritionGoals(date: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GoalDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNutritionGoals(date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.getNutritionGoals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateGoalRequest} updateGoalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGoal(updateGoalRequest: UpdateGoalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGoal(updateGoalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.updateGoal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateNutritionGoalsRequest} updateNutritionGoalsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNutritionGoals(updateNutritionGoalsRequest: UpdateNutritionGoalsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNutritionGoals(updateNutritionGoalsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GoalsApi.updateNutritionGoals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GoalsApi - factory interface
 * @export
 */
export const GoalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoalsApiFp(configuration)
    return {
        /**
         * 
         * @param {AddGoalRequest} addGoalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGoal(addGoalRequest: AddGoalRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdResponse> {
            return localVarFp.addGoal(addGoalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CalculateNutritionGoalsRequest} calculateNutritionGoalsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateNutritionGoals(calculateNutritionGoalsRequest: CalculateNutritionGoalsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.calculateNutritionGoals(calculateNutritionGoalsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GoalType} goalType 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoal(goalType: GoalType, date: string, options?: RawAxiosRequestConfig): AxiosPromise<GoalDto> {
            return localVarFp.getGoal(goalType, date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNutritionGoals(date: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GoalDto>> {
            return localVarFp.getNutritionGoals(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateGoalRequest} updateGoalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoal(updateGoalRequest: UpdateGoalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateGoal(updateGoalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateNutritionGoalsRequest} updateNutritionGoalsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNutritionGoals(updateNutritionGoalsRequest: UpdateNutritionGoalsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateNutritionGoals(updateNutritionGoalsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GoalsApi - object-oriented interface
 * @export
 * @class GoalsApi
 * @extends {BaseAPI}
 */
export class GoalsApi extends BaseAPI {
    /**
     * 
     * @param {AddGoalRequest} addGoalRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public addGoal(addGoalRequest: AddGoalRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).addGoal(addGoalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CalculateNutritionGoalsRequest} calculateNutritionGoalsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public calculateNutritionGoals(calculateNutritionGoalsRequest: CalculateNutritionGoalsRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).calculateNutritionGoals(calculateNutritionGoalsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GoalType} goalType 
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public getGoal(goalType: GoalType, date: string, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getGoal(goalType, date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public getNutritionGoals(date: string, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getNutritionGoals(date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateGoalRequest} updateGoalRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public updateGoal(updateGoalRequest: UpdateGoalRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).updateGoal(updateGoalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateNutritionGoalsRequest} updateNutritionGoalsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApi
     */
    public updateNutritionGoals(updateNutritionGoalsRequest: UpdateNutritionGoalsRequest, options?: RawAxiosRequestConfig) {
        return GoalsApiFp(this.configuration).updateNutritionGoals(updateNutritionGoalsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NutritionDiariesApi - axios parameter creator
 * @export
 */
export const NutritionDiariesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string | null} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNutritionDiariesByDate: async (date: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getNutritionDiariesByDate', 'date', date)
            const localVarPath = `/api/nutrition-diaries/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNutritionOverviewByPeriod: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getNutritionOverviewByPeriod', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getNutritionOverviewByPeriod', 'endDate', endDate)
            const localVarPath = `/api/nutrition-diaries/nutrition-overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NutritionDiariesApi - functional programming interface
 * @export
 */
export const NutritionDiariesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NutritionDiariesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string | null} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNutritionDiariesByDate(date: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNutritionDiariesByDateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNutritionDiariesByDate(date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NutritionDiariesApi.getNutritionDiariesByDate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNutritionOverviewByPeriod(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NutritionalContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNutritionOverviewByPeriod(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NutritionDiariesApi.getNutritionOverviewByPeriod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NutritionDiariesApi - factory interface
 * @export
 */
export const NutritionDiariesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NutritionDiariesApiFp(configuration)
    return {
        /**
         * 
         * @param {string | null} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNutritionDiariesByDate(date: string | null, options?: RawAxiosRequestConfig): AxiosPromise<GetNutritionDiariesByDateResponse> {
            return localVarFp.getNutritionDiariesByDate(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNutritionOverviewByPeriod(startDate: string, endDate: string, options?: RawAxiosRequestConfig): AxiosPromise<NutritionalContent> {
            return localVarFp.getNutritionOverviewByPeriod(startDate, endDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NutritionDiariesApi - object-oriented interface
 * @export
 * @class NutritionDiariesApi
 * @extends {BaseAPI}
 */
export class NutritionDiariesApi extends BaseAPI {
    /**
     * 
     * @param {string | null} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NutritionDiariesApi
     */
    public getNutritionDiariesByDate(date: string | null, options?: RawAxiosRequestConfig) {
        return NutritionDiariesApiFp(this.configuration).getNutritionDiariesByDate(date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NutritionDiariesApi
     */
    public getNutritionOverviewByPeriod(startDate: string, endDate: string, options?: RawAxiosRequestConfig) {
        return NutritionDiariesApiFp(this.configuration).getNutritionOverviewByPeriod(startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RecipeDiariesApi - axios parameter creator
 * @export
 */
export const RecipeDiariesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddRecipeDiaryRequest} addRecipeDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRecipeDiary: async (addRecipeDiaryRequest: AddRecipeDiaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addRecipeDiaryRequest' is not null or undefined
            assertParamExists('addRecipeDiary', 'addRecipeDiaryRequest', addRecipeDiaryRequest)
            const localVarPath = `/api/recipe-diaries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addRecipeDiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipeDiary: async (id: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRecipeDiary', 'id', id)
            const localVarPath = `/api/recipe-diaries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeDiaryById: async (id: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecipeDiaryById', 'id', id)
            const localVarPath = `/api/recipe-diaries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateRecipeDiaryRequest} updateRecipeDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecipeDiary: async (updateRecipeDiaryRequest: UpdateRecipeDiaryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRecipeDiaryRequest' is not null or undefined
            assertParamExists('updateRecipeDiary', 'updateRecipeDiaryRequest', updateRecipeDiaryRequest)
            const localVarPath = `/api/recipe-diaries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRecipeDiaryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipeDiariesApi - functional programming interface
 * @export
 */
export const RecipeDiariesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecipeDiariesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddRecipeDiaryRequest} addRecipeDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRecipeDiary(addRecipeDiaryRequest: AddRecipeDiaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRecipeDiary(addRecipeDiaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipeDiariesApi.addRecipeDiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecipeDiary(id: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecipeDiary(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipeDiariesApi.deleteRecipeDiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipeDiaryById(id: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeDiaryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipeDiaryById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipeDiariesApi.getRecipeDiaryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateRecipeDiaryRequest} updateRecipeDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecipeDiary(updateRecipeDiaryRequest: UpdateRecipeDiaryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecipeDiary(updateRecipeDiaryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipeDiariesApi.updateRecipeDiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RecipeDiariesApi - factory interface
 * @export
 */
export const RecipeDiariesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecipeDiariesApiFp(configuration)
    return {
        /**
         * 
         * @param {AddRecipeDiaryRequest} addRecipeDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRecipeDiary(addRecipeDiaryRequest: AddRecipeDiaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdResponse> {
            return localVarFp.addRecipeDiary(addRecipeDiaryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipeDiary(id: string | null, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRecipeDiary(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeDiaryById(id: string | null, options?: RawAxiosRequestConfig): AxiosPromise<RecipeDiaryDto> {
            return localVarFp.getRecipeDiaryById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateRecipeDiaryRequest} updateRecipeDiaryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecipeDiary(updateRecipeDiaryRequest: UpdateRecipeDiaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRecipeDiary(updateRecipeDiaryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecipeDiariesApi - object-oriented interface
 * @export
 * @class RecipeDiariesApi
 * @extends {BaseAPI}
 */
export class RecipeDiariesApi extends BaseAPI {
    /**
     * 
     * @param {AddRecipeDiaryRequest} addRecipeDiaryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipeDiariesApi
     */
    public addRecipeDiary(addRecipeDiaryRequest: AddRecipeDiaryRequest, options?: RawAxiosRequestConfig) {
        return RecipeDiariesApiFp(this.configuration).addRecipeDiary(addRecipeDiaryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipeDiariesApi
     */
    public deleteRecipeDiary(id: string | null, options?: RawAxiosRequestConfig) {
        return RecipeDiariesApiFp(this.configuration).deleteRecipeDiary(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipeDiariesApi
     */
    public getRecipeDiaryById(id: string | null, options?: RawAxiosRequestConfig) {
        return RecipeDiariesApiFp(this.configuration).getRecipeDiaryById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateRecipeDiaryRequest} updateRecipeDiaryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipeDiariesApi
     */
    public updateRecipeDiary(updateRecipeDiaryRequest: UpdateRecipeDiaryRequest, options?: RawAxiosRequestConfig) {
        return RecipeDiariesApiFp(this.configuration).updateRecipeDiary(updateRecipeDiaryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RecipesApi - axios parameter creator
 * @export
 */
export const RecipesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string | null} recipeId 
         * @param {AddIngredientRequest} addIngredientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIngredient: async (recipeId: string | null, addIngredientRequest: AddIngredientRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('addIngredient', 'recipeId', recipeId)
            // verify required parameter 'addIngredientRequest' is not null or undefined
            assertParamExists('addIngredient', 'addIngredientRequest', addIngredientRequest)
            const localVarPath = `/api/recipes/{recipeId}/ingredients`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addIngredientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateRecipeRequest} createRecipeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipe: async (createRecipeRequest: CreateRecipeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRecipeRequest' is not null or undefined
            assertParamExists('createRecipe', 'createRecipeRequest', createRecipeRequest)
            const localVarPath = `/api/recipes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRecipeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipe: async (id: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRecipe', 'id', id)
            const localVarPath = `/api/recipes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteRecipesRequest} deleteRecipesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipes: async (deleteRecipesRequest: DeleteRecipesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteRecipesRequest' is not null or undefined
            assertParamExists('deleteRecipes', 'deleteRecipesRequest', deleteRecipesRequest)
            const localVarPath = `/api/recipes/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteRecipesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeById: async (id: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecipeById', 'id', id)
            const localVarPath = `/api/recipes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesByUserId: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/recipes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} recipeId 
         * @param {RemoveIngredientsRequest} removeIngredientsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeIngredients: async (recipeId: string | null, removeIngredientsRequest: RemoveIngredientsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('removeIngredients', 'recipeId', recipeId)
            // verify required parameter 'removeIngredientsRequest' is not null or undefined
            assertParamExists('removeIngredients', 'removeIngredientsRequest', removeIngredientsRequest)
            const localVarPath = `/api/recipes/{recipeId}/ingredients/`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeIngredientsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UndoDeleteRecipeRequest} undoDeleteRecipeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undoDeleteRecipe: async (undoDeleteRecipeRequest: UndoDeleteRecipeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'undoDeleteRecipeRequest' is not null or undefined
            assertParamExists('undoDeleteRecipe', 'undoDeleteRecipeRequest', undoDeleteRecipeRequest)
            const localVarPath = `/api/recipes/undo-delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(undoDeleteRecipeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} recipeId 
         * @param {string | null} ingredientId 
         * @param {UpdateIngredientRequest} updateIngredientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIngredient: async (recipeId: string | null, ingredientId: string | null, updateIngredientRequest: UpdateIngredientRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('updateIngredient', 'recipeId', recipeId)
            // verify required parameter 'ingredientId' is not null or undefined
            assertParamExists('updateIngredient', 'ingredientId', ingredientId)
            // verify required parameter 'updateIngredientRequest' is not null or undefined
            assertParamExists('updateIngredient', 'updateIngredientRequest', updateIngredientRequest)
            const localVarPath = `/api/recipes/{recipeId}/ingredients/{ingredientId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)))
                .replace(`{${"ingredientId"}}`, encodeURIComponent(String(ingredientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateIngredientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} id 
         * @param {UpdateRecipeRequest} updateRecipeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecipe: async (id: string | null, updateRecipeRequest: UpdateRecipeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRecipe', 'id', id)
            // verify required parameter 'updateRecipeRequest' is not null or undefined
            assertParamExists('updateRecipe', 'updateRecipeRequest', updateRecipeRequest)
            const localVarPath = `/api/recipes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRecipeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipesApi - functional programming interface
 * @export
 */
export const RecipesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecipesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string | null} recipeId 
         * @param {AddIngredientRequest} addIngredientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addIngredient(recipeId: string | null, addIngredientRequest: AddIngredientRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addIngredient(recipeId, addIngredientRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.addIngredient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateRecipeRequest} createRecipeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecipe(createRecipeRequest: CreateRecipeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecipe(createRecipeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.createRecipe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecipe(id: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecipe(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.deleteRecipe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteRecipesRequest} deleteRecipesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecipes(deleteRecipesRequest: DeleteRecipesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecipes(deleteRecipesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.deleteRecipes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipeById(id: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipeById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.getRecipeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipesByUserId(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipesByUserId(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.getRecipesByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} recipeId 
         * @param {RemoveIngredientsRequest} removeIngredientsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeIngredients(recipeId: string | null, removeIngredientsRequest: RemoveIngredientsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeIngredients(recipeId, removeIngredientsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.removeIngredients']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UndoDeleteRecipeRequest} undoDeleteRecipeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async undoDeleteRecipe(undoDeleteRecipeRequest: UndoDeleteRecipeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.undoDeleteRecipe(undoDeleteRecipeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.undoDeleteRecipe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} recipeId 
         * @param {string | null} ingredientId 
         * @param {UpdateIngredientRequest} updateIngredientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIngredient(recipeId: string | null, ingredientId: string | null, updateIngredientRequest: UpdateIngredientRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIngredient(recipeId, ingredientId, updateIngredientRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.updateIngredient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} id 
         * @param {UpdateRecipeRequest} updateRecipeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecipe(id: string | null, updateRecipeRequest: UpdateRecipeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecipe(id, updateRecipeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecipesApi.updateRecipe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RecipesApi - factory interface
 * @export
 */
export const RecipesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecipesApiFp(configuration)
    return {
        /**
         * 
         * @param {string | null} recipeId 
         * @param {AddIngredientRequest} addIngredientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIngredient(recipeId: string | null, addIngredientRequest: AddIngredientRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdResponse> {
            return localVarFp.addIngredient(recipeId, addIngredientRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateRecipeRequest} createRecipeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipe(createRecipeRequest: CreateRecipeRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdResponse> {
            return localVarFp.createRecipe(createRecipeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipe(id: string | null, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRecipe(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteRecipesRequest} deleteRecipesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipes(deleteRecipesRequest: DeleteRecipesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRecipes(deleteRecipesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipeById(id: string | null, options?: RawAxiosRequestConfig): AxiosPromise<RecipeDto> {
            return localVarFp.getRecipeById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesByUserId(options?: RawAxiosRequestConfig): AxiosPromise<Array<RecipeDto>> {
            return localVarFp.getRecipesByUserId(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} recipeId 
         * @param {RemoveIngredientsRequest} removeIngredientsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeIngredients(recipeId: string | null, removeIngredientsRequest: RemoveIngredientsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeIngredients(recipeId, removeIngredientsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UndoDeleteRecipeRequest} undoDeleteRecipeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undoDeleteRecipe(undoDeleteRecipeRequest: UndoDeleteRecipeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.undoDeleteRecipe(undoDeleteRecipeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} recipeId 
         * @param {string | null} ingredientId 
         * @param {UpdateIngredientRequest} updateIngredientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIngredient(recipeId: string | null, ingredientId: string | null, updateIngredientRequest: UpdateIngredientRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateIngredient(recipeId, ingredientId, updateIngredientRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} id 
         * @param {UpdateRecipeRequest} updateRecipeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecipe(id: string | null, updateRecipeRequest: UpdateRecipeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRecipe(id, updateRecipeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecipesApi - object-oriented interface
 * @export
 * @class RecipesApi
 * @extends {BaseAPI}
 */
export class RecipesApi extends BaseAPI {
    /**
     * 
     * @param {string | null} recipeId 
     * @param {AddIngredientRequest} addIngredientRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public addIngredient(recipeId: string | null, addIngredientRequest: AddIngredientRequest, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).addIngredient(recipeId, addIngredientRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateRecipeRequest} createRecipeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public createRecipe(createRecipeRequest: CreateRecipeRequest, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).createRecipe(createRecipeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public deleteRecipe(id: string | null, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).deleteRecipe(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteRecipesRequest} deleteRecipesRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public deleteRecipes(deleteRecipesRequest: DeleteRecipesRequest, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).deleteRecipes(deleteRecipesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public getRecipeById(id: string | null, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).getRecipeById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public getRecipesByUserId(options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).getRecipesByUserId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} recipeId 
     * @param {RemoveIngredientsRequest} removeIngredientsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public removeIngredients(recipeId: string | null, removeIngredientsRequest: RemoveIngredientsRequest, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).removeIngredients(recipeId, removeIngredientsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UndoDeleteRecipeRequest} undoDeleteRecipeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public undoDeleteRecipe(undoDeleteRecipeRequest: UndoDeleteRecipeRequest, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).undoDeleteRecipe(undoDeleteRecipeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} recipeId 
     * @param {string | null} ingredientId 
     * @param {UpdateIngredientRequest} updateIngredientRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public updateIngredient(recipeId: string | null, ingredientId: string | null, updateIngredientRequest: UpdateIngredientRequest, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).updateIngredient(recipeId, ingredientId, updateIngredientRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} id 
     * @param {UpdateRecipeRequest} updateRecipeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public updateRecipe(id: string | null, updateRecipeRequest: UpdateRecipeRequest, options?: RawAxiosRequestConfig) {
        return RecipesApiFp(this.configuration).updateRecipe(id, updateRecipeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TrainingsApi - axios parameter creator
 * @export
 */
export const TrainingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTrainingRequest} createTrainingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTraining: async (createTrainingRequest: CreateTrainingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTrainingRequest' is not null or undefined
            assertParamExists('createTraining', 'createTrainingRequest', createTrainingRequest)
            const localVarPath = `/api/trainings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTrainingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTraining: async (id: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTraining', 'id', id)
            const localVarPath = `/api/trainings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainings: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/trainings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string | null} id 
         * @param {UpdateTrainingRequest} updateTrainingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTraining: async (id: string | null, updateTrainingRequest: UpdateTrainingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTraining', 'id', id)
            // verify required parameter 'updateTrainingRequest' is not null or undefined
            assertParamExists('updateTraining', 'updateTrainingRequest', updateTrainingRequest)
            const localVarPath = `/api/trainings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTrainingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainingsApi - functional programming interface
 * @export
 */
export const TrainingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTrainingRequest} createTrainingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTraining(createTrainingRequest: CreateTrainingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTraining(createTrainingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainingsApi.createTraining']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTraining(id: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTraining(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainingsApi.deleteTraining']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrainings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrainingDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrainings(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainingsApi.getTrainings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string | null} id 
         * @param {UpdateTrainingRequest} updateTrainingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTraining(id: string | null, updateTrainingRequest: UpdateTrainingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTraining(id, updateTrainingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TrainingsApi.updateTraining']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TrainingsApi - factory interface
 * @export
 */
export const TrainingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainingsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateTrainingRequest} createTrainingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTraining(createTrainingRequest: CreateTrainingRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdResponse> {
            return localVarFp.createTraining(createTrainingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTraining(id: string | null, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTraining(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainings(options?: RawAxiosRequestConfig): AxiosPromise<Array<TrainingDto>> {
            return localVarFp.getTrainings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string | null} id 
         * @param {UpdateTrainingRequest} updateTrainingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTraining(id: string | null, updateTrainingRequest: UpdateTrainingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateTraining(id, updateTrainingRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrainingsApi - object-oriented interface
 * @export
 * @class TrainingsApi
 * @extends {BaseAPI}
 */
export class TrainingsApi extends BaseAPI {
    /**
     * 
     * @param {CreateTrainingRequest} createTrainingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingsApi
     */
    public createTraining(createTrainingRequest: CreateTrainingRequest, options?: RawAxiosRequestConfig) {
        return TrainingsApiFp(this.configuration).createTraining(createTrainingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingsApi
     */
    public deleteTraining(id: string | null, options?: RawAxiosRequestConfig) {
        return TrainingsApiFp(this.configuration).deleteTraining(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingsApi
     */
    public getTrainings(options?: RawAxiosRequestConfig) {
        return TrainingsApiFp(this.configuration).getTrainings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string | null} id 
     * @param {UpdateTrainingRequest} updateTrainingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingsApi
     */
    public updateTraining(id: string | null, updateTrainingRequest: UpdateTrainingRequest, options?: RawAxiosRequestConfig) {
        return TrainingsApiFp(this.configuration).updateTraining(id, updateTrainingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateCurrentUserRequest} updateCurrentUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser: async (updateCurrentUserRequest: UpdateCurrentUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCurrentUserRequest' is not null or undefined
            assertParamExists('updateCurrentUser', 'updateCurrentUserRequest', updateCurrentUserRequest)
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCurrentUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateCurrentUserRequest} updateCurrentUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCurrentUser(updateCurrentUserRequest: UpdateCurrentUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCurrentUser(updateCurrentUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.updateCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<UserDto> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateCurrentUserRequest} updateCurrentUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUser(updateCurrentUserRequest: UpdateCurrentUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateCurrentUser(updateCurrentUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getCurrentUser(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateCurrentUserRequest} updateCurrentUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateCurrentUser(updateCurrentUserRequest: UpdateCurrentUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateCurrentUser(updateCurrentUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



