import React, {
  createContext,
  ReactNode,
  useCallback,
  useContext,
  useMemo,
  useRef,
  useState,
} from "react";
import { v4 as uuidv4 } from "uuid";

type MutationsManagerContextType = {
  getMutationState: (mutationType: MutationsType) => boolean;
  updateMutationState: (
    mutationType: MutationsType,
    id: MutationId,
    state: boolean,
  ) => void;
};

const MutationsManagerContext = createContext<
  MutationsManagerContextType | undefined
>(undefined);

type MutationsType = string;
type MutationId = string;

export const MutationsManagerContextProvider: React.FC<{
  children: ReactNode;
}> = ({ children }) => {
  const [mutationStates, setMutationStates] = useState<
    Record<MutationsType, Record<MutationId, boolean>>
  >({} as Record<MutationsType, Record<MutationId, boolean>>);

  const updateMutationState = useCallback(
    (mutationType: MutationsType, id: MutationId, state: boolean) => {
      setMutationStates((prev) => ({
        ...prev,
        [mutationType]: { ...prev[mutationType], [id]: state },
      }));
    },
    [],
  );

  const getMutationState = useCallback(
    (mutationType: MutationsType) => {
      if (mutationStates[mutationType] === undefined) return false;
      return (
        Object.values(mutationStates[mutationType]).filter((state) => state)
          .length > 1
      );
    },
    [mutationStates],
  );

  const value = useMemo(
    () => ({ getMutationState, updateMutationState }),
    [getMutationState, updateMutationState],
  );

  return (
    <MutationsManagerContext.Provider value={value}>
      {children}
    </MutationsManagerContext.Provider>
  );
};

// Separate hooks for state and updates
export const useMutationsManagerContext = (mutationType: MutationsType) => {
  const context = useContext(MutationsManagerContext);
  if (context === undefined)
    throw new Error(
      "useMutationsManagerContext must be used within MutationsManagerContextProvider",
    );

  const mutationIdRef = useRef(uuidv4());

  return {
    mutationState: context.getMutationState(mutationType),
    updateMutationState: (state: boolean) =>
      context.updateMutationState(mutationType, mutationIdRef.current, state),
  };
};

// // Modified useStoreLoadingStateToContext.ts
// export default function useStoreLoadingStateToContext(
//   id: string,
//   loadingState: boolean,
// ) {
//   const updateLoadingState = useLoadingUpdate(); // Only subscribes to updater function

//   useEffect(() => {
//     updateLoadingState(id, loadingState);
//   }, [id, loadingState, updateLoadingState]);
// }
